package MINI_PROJECT;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;

public class BillVisualization extends JFrame {

    private static final long serialVersionUID = 1L;

    public BillVisualization() {
        setTitle("Number of Bills and Animals Generated by Farmer");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(1500, 800); // Increased width and height of the JFrame
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setPreferredSize(new Dimension(1400, 700)); // Increased width and height of the JPanel

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/milk", "root", "root@123");
            Statement statement = connection.createStatement();

            ResultSet resultSet = statement.executeQuery("SELECT farmer_id, COUNT(*) AS bill_count FROM bill GROUP BY farmer_id");

            while (resultSet.next()) {
                int farmerId = resultSet.getInt("farmer_id");
                int billCount = resultSet.getInt("bill_count");

                dataset.addValue(billCount, "Bills", Integer.toString(farmerId));
            }

            resultSet.close(); // Close the first ResultSet

            ResultSet animalResultSet = statement.executeQuery("SELECT fid, COUNT(*) AS animal_count FROM an_details GROUP BY fid");

            while (animalResultSet.next()) {
                int farmerId = animalResultSet.getInt("fid"); // Assuming "fid" is the farmer ID in the "an_details" table
                int animalCount = animalResultSet.getInt("animal_count");

                dataset.addValue(animalCount, "Animals", Integer.toString(farmerId));
            }

            animalResultSet.close(); // Close the second ResultSet
            statement.close();
            connection.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }

        JFreeChart chart = ChartFactory.createStackedBarChart(
                "Number of Bills and Animals Generated by Farmer", "Farmer ID", "Count", dataset);

        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        CategoryAxis xAxis = plot.getDomainAxis();
        xAxis.setMaximumCategoryLabelLines(3);
        xAxis.setMaximumCategoryLabelWidthRatio(0.9f);
        xAxis.setLowerMargin(0.02);
        xAxis.setUpperMargin(0.02);
        xAxis.setCategoryMargin(0.05);

        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(2400, 600)); // Increased width and height of the ChartPanel

        JScrollPane scrollPane = new JScrollPane(chartPanel);
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        mainPanel.add(scrollPane, BorderLayout.CENTER);
        add(mainPanel);
    }

    public static void showBillData() {
        SwingUtilities.invokeLater(() -> {
            BillVisualization billVisualization = new BillVisualization();
            billVisualization.setVisible(true);
        });
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BillVisualization billVisualization = new BillVisualization();
            billVisualization.setVisible(true);
        });
    }
}

